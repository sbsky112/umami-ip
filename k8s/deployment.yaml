apiVersion: v1
kind: Namespace
metadata:
  name: umami
---
apiVersion: v1
kind: Secret
metadata:
  name: umami-secrets
  namespace: umami
type: Opaque
stringData:
  app-secret: "replace-me-with-a-random-string"
  database-url: "postgresql://umami:umami@postgres:5432/umami"
  turnstile-site-key: ""
  turnstile-secret-key: ""
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: umami-config
  namespace: umami
data:
  database-type: "postgresql"
  node-env: "production"
  base-path: ""
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: umami
  namespace: umami
  labels:
    app: umami
spec:
  replicas: 2
  selector:
    matchLabels:
      app: umami
  template:
    metadata:
      labels:
        app: umami
    spec:
      containers:
      - name: umami
        image: umami:latest
        ports:
        - containerPort: 3000
        env:
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: umami-secrets
              key: database-url
        - name: DATABASE_TYPE
          valueFrom:
            configMapKeyRef:
              name: umami-config
              key: database-type
        - name: APP_SECRET
          valueFrom:
            secretKeyRef:
              name: umami-secrets
              key: app-secret
        - name: NEXT_PUBLIC_TURNSTILE_SITE_KEY
          valueFrom:
            secretKeyRef:
              name: umami-secrets
              key: turnstile-site-key
        - name: TURNSTILE_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: umami-secrets
              key: turnstile-secret-key
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: umami-config
              key: node-env
        - name: BASE_PATH
          valueFrom:
            configMapKeyRef:
              name: umami-config
              key: base-path
        - name: PORT
          value: "3000"
        - name: HOSTNAME
          value: "0.0.0.0"
        livenessProbe:
          httpGet:
            path: /api/heartbeat
            port: 3000
          initialDelaySeconds: 40
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/heartbeat
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 5
          failureThreshold: 1
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
---
apiVersion: v1
kind: Service
metadata:
  name: umami-service
  namespace: umami
spec:
  selector:
    app: umami
  ports:
  - protocol: TCP
    port: 80
    targetPort: 3000
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: umami-ingress
  namespace: umami
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - umami.example.com
    secretName: umami-tls
  rules:
  - host: umami.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: umami-service
            port:
              number: 80
---
# PostgreSQL StatefulSet (for production, consider using cloud database)
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: umami
spec:
  serviceName: postgres
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        env:
        - name: POSTGRES_DB
          value: umami
        - name: POSTGRES_USER
          value: umami
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: umami-secrets
              key: database-password
        ports:
        - containerPort: 5432
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
  volumeClaimTemplates:
  - metadata:
      name: postgres-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 10Gi
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: umami
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
  clusterIP: None